name: CI/CD Pipeline - Production

on:
  workflow_run:
    workflows: ["CI/CD Pipeline - Staging"]
    types:
      - completed
  workflow_dispatch:  # Cette section permet le déclenchement manuel
    inputs:
      manual-trigger:
        description: 'Manually trigger the workflow'
        default: 'true'
      tag:
        description: 'Create new production tag'
        required: true
      message-tag:
        description: 'Add message to your tag'
        required: false


jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: ${{ inputs.tag }}
          tag_exists_error: false
          message: ${{ inputs.message-tag }}
  
      - name: Check if tag exists
        id: check_tag
        run: echo "::set-output name=tag_exists::$(git rev-parse -q --verify refs/tags/${{ inputs.tag }} || echo false)"
      
      - name: Echo tag exists
        run: echo "Tag already exists ${{ steps.check_tag.outputs.tag_exists }}"
      
      - name: Pipeline condition
        if: steps.check_tag.outputs.tag_exists != 'true'
        run: echo "Pipeline can continue"



  build-docker-image:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'workflow_dispatch'  # Permet l'exécution en cas de déclenchement manuel

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Login to GitHub
      run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
    # - name: Start containers
    #   run: docker-compose -f "docker-compose.staging.yml" build
    # - name: Pushing all images
    #   run: docker-compose -f "docker-compose.staging.yml" push
    # - name: Stop containers
    #   if: always()
    #   run: docker-compose -f "docker-compose.staging.yml" down
    

  deploy-stagging:
    runs-on: ubuntu-latest
    needs: build-docker-image
    environment: production

    steps:
    - name: Deploy APP to production
      run: echo ${{ secrets.APIKEY }}
    - name: Echo value
      run: echo ${{ vars.TEST_VALUE }}
